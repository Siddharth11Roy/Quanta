# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12c1wLvoaatLlRxJ9xQY9SR1DwO_S3z_U
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Load the pre-trained model
@st.cache_data
def load_model():
    return LinearRegression()

# Process data function
def process_data(test_file):
    test = pd.read_csv(test_file)
    test['year'] = pd.to_datetime(test['Date']).dt.year
    test['day'] = pd.to_datetime(test['Date']).dt.day

    test['lag_0'] = test['Low'].shift(+1).fillna(18068.349609)
    test['lag_1'] = test['Low'].shift(+2).fillna(18068.349609)
    test['lag_2'] = test['Low'].shift(+3).fillna(18068.349609)
    test['lag_3'] = test['Low'].shift(+4).fillna(18068.349609)

    X_test = test[['year', 'Low', 'Close', 'High', 'lag_0', 'lag_1', 'lag_2', 'lag_3']]
    return test, X_test

# Main Streamlit app
st.title("Stock Price Prediction App")
st.write("Upload your test CSV file to generate predictions and fetch stock data.")

# File upload
test_file = st.file_uploader("Upload Test CSV File", type="csv")

if test_file:
    model = load_model()

    # Mock training to avoid errors
    X_train_mock = np.random.rand(100, 7)
    y_train_mock = np.random.rand(100)
    model.fit(X_train_mock, y_train_mock)

    test, X_test = process_data(test_file)
    y_pred = model.predict(X_test)

    submission = pd.DataFrame({
        'id': test['id'],
        'Open': y_pred
    })

    submission.to_csv('output.csv', index=False)
    st.success("Predictions generated! File saved as output.csv.")

    with open('output.csv', 'rb') as file:
        st.download_button(label="Download Predictions", data=file, file_name='output.csv', mime='text/csv')

    # Stock ID input
    stock_id = st.text_input("Enter the Stock ID to fetch details:")

    if stock_id:
        try:
            stock_id = int(stock_id)
            open_price = submission.loc[submission['id'] == stock_id, 'Open'].values[0]
            st.write(f"### Open Price for Stock ID {stock_id}: {open_price}")

            high = test.loc[test['id'] == stock_id, 'High'].values[0]
            low = test.loc[test['id'] == stock_id, 'Low'].values[0]
            close = test.loc[test['id'] == stock_id, 'Close'].values[0]

            st.write("### Additional Details")
            st.write(f"**High:** {high}")
            st.write(f"**Low:** {low}")
            st.write(f"**Close:** {close}")
        except IndexError:
            st.error("Stock ID not found in the dataset.")